syntax = "proto3";

package build.buildfarm.v1test;

import "google/api/annotations.proto";
import "google/devtools/remoteexecution/v1test/remote_execution.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/duration.proto";
import "google/rpc/status.proto";

option java_package = "build.buildfarm.v1test";
option java_multiple_files = true;
option java_outer_classname = "OperationQueueProto";

// The OperationQueue API is used internally to communicate with Workers
service OperationQueue {
  rpc Take(TakeOperationRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = { get: "/v1test/{instance_name=**}/operation:take" };
  }

  rpc Put(google.longrunning.Operation) returns (google.rpc.Status) {
    option (google.api.http) = { post: "/v1test/{instance_name=**}/operation:put" body: "*" };
  }

  rpc Poll(PollOperationRequest) returns (google.rpc.Status) {
    option (google.api.http) = { get: "/v1test/{instance_name=**}/operation:poll" };
  }
}

message TakeOperationRequest {
  // The instance of the execution system to operate against. A server may
  // support multiple instances of the execution system (with their own workers,
  // storage, caches, etc.). The server MAY require use of this field to select
  // between them in an implementation-defined fashion, otherwise it can be
  // omitted.
  string instance_name = 1;

  // The platform features available for the execution environment. The server MAY
  // choose to execute the action on any worker satisfying the requirements, so
  // the client SHOULD ensure that running the action on any such worker will
  // have the same result.
  google.devtools.remoteexecution.v1test.Platform platform = 5;
}

message PollOperationRequest {
  // The operation name in question
  string operation_name = 2;

  // The current state of the worker
  google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.Stage stage = 3;
}

message BuildFarmServerConfig {
  repeated InstanceConfig instances = 1;

  string default_instance_name = 3; // must be present in instances list or empty

  int32 port = 2;
}

message MemoryInstanceConfig {
  // the limits of the listOperations request
  int32 list_operations_default_page_size = 1;
  int32 list_operations_max_page_size = 2;

  // the limits of the getTree request
  int32 tree_default_page_size = 3;
  int32 tree_max_page_size = 4;

  // timeout after dispatch before which executing,
  // complete or an operation poll must be received, or
  // the operation is considered lost on a worker and is
  // requeued
  google.protobuf.Duration operation_poll_timeout = 5;

  // delay after timeout when executing before which
  // completed must be received, or the operation is
  // considered lost on a worker and is requeued
  google.protobuf.Duration operation_completed_delay = 6;

  // limit for CAS total content size
  int64 cas_max_size_bytes = 7;

  // default timeout for actions
  // if a timeout is unspecified for an action, this value
  // is imposed on it, after which the operation will be
  // cancelled
  google.protobuf.Duration default_action_timeout = 8;

  // maximum selectable timeout
  // a maximum threshold for an action's specified timeout,
  // beyond which an action will be rejected for execution
  google.protobuf.Duration maximum_action_timeout = 9;
}

message RedisShardBackplaneConfig {
  string redis_uri = 1;
  int32 jedis_pool_max_total = 15;
  string workers_set_name = 2;
  string action_cache_prefix = 3;
  int32 action_cache_expire = 4;
  string operation_prefix = 5;
  int32 operation_expire = 6;
  string pre_queued_operations_list_name = 18;
  string queued_operations_list_name = 7;
  string dispatched_operations_hash_name = 8;
  string operation_channel_prefix = 9;
  string cas_prefix = 10;
  int32 cas_expire = 11;
  string tree_prefix = 12;
  int32 tree_expire = 13;
  bool subscribe_to_operation = 14;
  int32 max_queue_depth = 16;
  int32 max_pre_queue_depth = 17;
}

message ShardInstanceConfig {
  bool run_dispatched_monitor = 1;

  int64 max_completed_operations_count = 4;

  int32 action_cache_sweep_period = 5;

  oneof backplane {
    RedisShardBackplaneConfig redis_shard_backplane_config = 6;
  }
}

message ShardWorkerInstanceConfig {
  // whether to stream stdout from processes
  bool stream_stdout = 6;

  // control for process stdout
  CASInsertionPolicy stdout_cas_policy = 7;

  // whether to stream stderr from processes
  bool stream_stderr = 8;

  // control for process stdout
  CASInsertionPolicy stderr_cas_policy = 9;

  // control for process output files
  CASInsertionPolicy file_cas_policy = 10;

  // page size for getTree request
  uint32 tree_page_size = 12;

  // default timeout for actions
  // if a timeout is unspecified for an action, this value
  // is imposed on it, after which the operation will
  // be killed
  google.protobuf.Duration default_action_timeout = 13;

  // maximum selectable timeout
  // a maximum threshold for an action's specified timeout,
  // beyond which an action will be rejected for execution
  google.protobuf.Duration maximum_action_timeout = 14;
}

message ShardWorkerConfig {
  ShardWorkerInstanceConfig shard_worker_instance_config = 1;

  int32 port = 2;

  string public_name = 3;

  // base directory for all work being performed
  string root = 4;

  // path to cached files from CAS
  // if relative, is made relative to root
  string cas_cache_directory = 5;

  // limit for contents of files retained
  // from CAS in the cache
  int64 cas_cache_max_size_bytes = 6;

  // limit for CAS total content size
  int64 cas_max_size_bytes = 7;

  // page size for getTree request
  uint32 tree_page_size = 8;

  // whether the worker should attempt to requeue
  // an operation when an unexpected failure
  // occurs during an execution
  bool requeue_on_failure = 11;

  bool use_fuse_cas = 12;

  // period of poll requests during execution
  google.protobuf.Duration operation_poll_period = 13;

  // initial platform used to match operations
  google.devtools.remoteexecution.v1test.Platform platform = 14;

  // total size of the inline content for
  // action results
  int32 inline_content_limit = 15;

  // execute width
  int32 execute_stage_width = 16;

  // symlink cas input-only directories
  bool link_input_directories = 17;

  // selected hash function
  InstanceConfig.HashFunction hash_function = 18;

  // default timeout for actions
  // if a timeout is unspecified for an action, this value
  // is imposed on it, after which the operation will
  // be killed
  google.protobuf.Duration default_action_timeout = 19;

  // maximum selectable timeout
  // a maximum threshold for an action's specified timeout,
  // beyond which an action will be rejected for execution
  google.protobuf.Duration maximum_action_timeout = 20;

  oneof backplane {
    RedisShardBackplaneConfig redis_shard_backplane_config = 21;
  }
}

message ShardDispatchedOperation {
  string name = 1;

  int64 requeue_at = 2;

  int64 expire_at = 3;
}

message ProfiledQueuedOperationMetadata {
  QueuedOperationMetadata queued_metadata = 1;

  google.protobuf.Duration transformed_in = 2;

  google.protobuf.Duration validated_in = 3;
}

message QueuedOperationMetadata {
  google.devtools.remoteexecution.v1test.Action action = 1;

  google.devtools.remoteexecution.v1test.Command command = 2;

  repeated google.devtools.remoteexecution.v1test.Directory directories = 3;

  google.devtools.remoteexecution.v1test.ExecuteOperationMetadata execute_operation_metadata = 4;

  bool skip_cache_lookup = 5;

  google.devtools.remoteexecution.v1test.RequestMetadata request_metadata = 6;
}

message ExecutingOperationMetadata {
  int64 started_at = 1;

  string executing_on = 2;

  google.devtools.remoteexecution.v1test.ExecuteOperationMetadata execute_operation_metadata = 3;

  google.devtools.remoteexecution.v1test.RequestMetadata request_metadata = 4;
}

message CompletedOperationMetadata {
  int64 completed_at = 1;

  string executed_on = 2;

  google.protobuf.Duration matched_in = 7;

  google.protobuf.Duration fetched_in = 3;

  google.protobuf.Duration executed_in = 4;

  google.protobuf.Duration reported_in = 5;

  google.devtools.remoteexecution.v1test.ExecuteOperationMetadata execute_operation_metadata = 6;

  google.devtools.remoteexecution.v1test.RequestMetadata request_metadata = 8;
}

message InstanceConfig {
  string name = 1;

  enum HashFunction {
    UNKNOWN = 0;
    MD5 = 1;
    SHA1 = 2;
    SHA256 = 3;
  }

  HashFunction hash_function = 2;

  oneof type {
    MemoryInstanceConfig memory_instance_config = 3;
    ShardInstanceConfig shard_instance_config = 4;
  }
}

enum CASInsertionPolicy {
  UNKNOWN = 0;

  ALWAYS_INSERT = 1;

  INSERT_ABOVE_LIMIT = 2;
};

message InstanceEndpoint {
  // target suitable for grpc channel creation: host:port is common
  string target = 1;

  // instance to be used
  string instance_name = 2;
}

message WorkerConfig {
  InstanceConfig.HashFunction hash_function = 1;

  // endpoint for all cas requests
  InstanceEndpoint content_addressable_storage = 2;

  // endpoint for all action cache requests
  InstanceEndpoint action_cache = 3;

  // endpoint for all operation execution requests
  InstanceEndpoint operation_queue = 4;

  // base directory for all work being performed
  string root = 5;

  // path to cached files from CAS
  // if relative, is made relative to root
  string cas_cache_directory = 6;

  // limit for contents of files retained
  // from CAS in the cache
  int64 cas_cache_max_size_bytes = 7;

  // total size of the inline content for
  // action results
  int32 inline_content_limit = 8;

  // whether to stream stdout from processes
  bool stream_stdout = 9;

  // policy for process stdout
  CASInsertionPolicy stdout_cas_policy = 10;

  // whether to stream stderr from processes
  bool stream_stderr = 11;

  // policy for process stdout
  CASInsertionPolicy stderr_cas_policy = 12;

  // policy for process output files
  CASInsertionPolicy file_cas_policy = 13;

  // whether the worker should attempt to requeue
  // an operation when an unexpected failure
  // occurs during an execution
  bool requeue_on_failure = 14;

  // page size for getTree request
  uint32 tree_page_size = 15;

  // period of poll requests during execution
  google.protobuf.Duration operation_poll_period = 16;

  // initial platform used to match operations
  google.devtools.remoteexecution.v1test.Platform platform = 17;

  // execute width
  int32 execute_stage_width = 18;

  // symlink cas input-only directories
  bool link_input_directories = 19;

  // default timeout for actions
  // if a timeout is unspecified for an action, this value
  // is imposed on it, after which the operation will
  // be killed
  google.protobuf.Duration default_action_timeout = 20;

  // maximum selectable timeout
  // a maximum threshold for an action's specified timeout,
  // beyond which an action will be rejected for execution
  google.protobuf.Duration maximum_action_timeout = 21;
}

message TreeIteratorToken {
  repeated google.devtools.remoteexecution.v1test.Digest directories = 1;
}

message OperationIteratorToken {
  string operation_name = 1;
}
